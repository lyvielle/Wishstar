@rendermode InteractiveServer
@page "/category"
@using Wishstar.Components.Pages.Context
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime

<PageTitle>ðŸ’« Create Category - Wishstar</PageTitle>
<HeadContent>
    <link rel="stylesheet" href="styles/category.styles.css">
</HeadContent>

<div class="container">
    <button class="back-btn" @onclick="() => NavigateBack()">
        <i class="fas fa-arrow-left"></i>
        Back
    </button>

    <div class="category-form">
        <div class="form-group">
            <label>Category Name <span class="required">*</span></label>
            <input type="text" id="categoryName" placeholder="Enter category name" required
                @bind="CategoryItem.CategoryName">
        </div>

        <div class="form-group">
            <label>Description</label>
            <input type="text" id="categoryDescription" placeholder="Add a description (optional)"
                @bind="CategoryItem.CategoryDescription">
        </div>

        <div class="form-actions">
            @if (Action == PageContextAction.Update)
            {
                <button class="save-btn" id="deleteCategory"
                    @onclick="@(() => JSRuntime.InvokeVoidAsync("updateCategory", CategoryItem, Enum.GetName(PageContextAction.Delete)))">
                    Delete Vendor
                </button>
            }
            <button class="save-btn" id="saveCategory"
                @onclick="@(() => JSRuntime.InvokeVoidAsync("updateCategory", CategoryItem, Enum.GetName(Action)))">
                @if (Action == PageContextAction.Update)
                {
                    <text>Update Category</text>
                }
                else if (Action == PageContextAction.Add)
                {
                    <text>Add Category</text>
                }
            </button>
        </div>
    </div>
</div>

<script>
    function disableButton($btn)) {
        if ($btn) {
            $btn.html('<i class="fas fa-spinner fa-spin"></i> Saving...');
            $btn.prop('disabled', true);
        }
    }

    function enableButton($btn, content) {
        if ($btn) {
            $btn.html(content);
            $btn.prop('disabled', false);
        }
    }

    function updateCategory(category, action) {
        if (!$('#categoryName').val()) {
            showError('Category name is required');
            return;
        }

        disableButton($('#saveCategory'));
        disableButton($('#deleteCategory'));

        let url = '/api/categories/add';
        if (action === 'Update') {
            url = "/api/categories/update";
            errorMessage = "Failed to update category. Please try again.";
        } else if (action == 'Delete') {
            url = "api/categories/delete";
            errorMessage = "Failed to delete category. Please try again";
        }

        $.ajax({
            type: 'POST',
            url: url,
            contentType: 'application/json',
            data: JSON.stringify(category),
            success: () => {
                if (window.componentInstance) {
                    window.componentInstance.invokeMethodAsync('NavigateBack');
                } else {
                    console.error("Component instance not registered.");
                }
            },
            error: () => {
                console.error('Save error:', textStatus, errorThrown);
                showError('Failed to save category');
            },
            complete: () => {
                enableButton($('#saveCategory'), 'Save Category');
                enableButton($('#deleteCategory'), 'Delete Category');
            }
        });
    }

    function registerCategoryInstance(instance) {
        if (!window.componentInstance) {
            window.componentInstance = instance;
        }
    }

    function showError(message) {
        $('.error-message').remove();
        $('.category-form').prepend(
            $(`<div class="error-message">${message}</div>`)
        );
    }
</script>

@code {
    private DotNetObjectReference<Category>? _componentRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _componentRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("registerCategoryInstance", _componentRef);
        }
    }

    public void Dispose()
    {
        _componentRef?.Dispose();
    }
}