@rendermode InteractiveServer
@page "/wish"
@using Wishstar.Components.Pages.Context
@using Wishstar.Extensions
@using Wishstar.Models
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<PageTitle>Create Wish - Wishstar</PageTitle>
<HeadContent>
	<link rel="stylesheet" href="styles/wish.styles.css">
</HeadContent>

<div class="container">
	<button class="back-btn" onclick="window.history.back()">
		<i class="fas fa-arrow-left"></i>
		Back
	</button>

	<div class="wish-form">
		<!-- Image Upload -->
		<div class="image-upload">
			<div class="upload-preview" id="imagePreview">
				<i class="fas fa-camera fa-2x" id="wishImageUploadDummy"></i>
				<img alt="Product image" hidden id="wishImagePreview">
				<div id="wishImageUploadText">Click to upload image</div>
			</div>
			<input type="file" id="imageUpload" accept="image/*" hidden onchange="uploadImage()">
		</div>

		<!-- Wish Details -->
		<div class="form-group">
			<label>Wish Name <span class="required">*</span></label>
			<input type="text" id="wishName" placeholder="Enter wish name" required @bind="WishItem.ItemName">
		</div>

		<div class="form-group">
			<label>Description</label>
			<textarea id="wishDescription" rows="3" placeholder="Add a description"
				@onchange="OnWishDescriptionChanged"></textarea>
		</div>

		<!-- Vendor Selection -->
		<div class="form-group">
			<label>Vendor <span class="required">*</span></label>
			<select id="vendorSelect" required @onchange="OnVendorSelected">
				<option value="">Select vendor</option>
				@foreach (var vendor in Database.GetVendors())
				{
					<option value="@vendor.VendorName">@vendor.VendorName</option>
				}
				<option value="new" class="combo-add">
					<i class="fas fa-plus"></i>Add New Vendor
				</option>
			</select>
		</div>

		<!-- Product Link -->
		<div class="form-group">
			<label>Product Link <span class="required">*</span></label>
			<input type="url" id="productLink" placeholder="https://example.com/product" required
				@bind="WishItem.ProductLink">
		</div>

		<!-- Price & Currency -->
		<div class="form-group">
			<label>Price <span class="required">*</span></label>
			<div class="price-group">
				<input type="number" id="productPrice" placeholder="0.00" step="0.01" required @bind="PriceAmount">
				<select id="currencySelect" @onchange="OnCurrencySelected">
					@foreach (var currency in CurrencyDescriptor.GetAllCurrencies())
					{
						<option value="@currency.Code">@currency.Code</option>
					}
				</select>
			</div>
		</div>

		<!-- Category Selection -->
		<div class="form-group">
			<label>Category <span class="required">*</span></label>
			<select id="categorySelect" required @onchange="OnCategorySelected">
				@foreach (var category in Database.GetCategories())
				{
					<option value="@category.CategoryName">@category.CategoryName</option>
				}
				<option value="new" class="combo-add">
					<i class="fas fa-plus"></i>Add New Category
				</option>
			</select>
		</div>

		<div class="form-actions">
			<button class="save-btn" id="saveWish" onclick="saveWish()">
				Save Wish
			</button>

		</div>
	</div>
</div>

<script>
	function showError(message) {
		$('.error-message').remove();
		$('.wish-form').prepend(
			$(`<div class="error-message">${message}</div>`));
	}

	function setLoadingState(isLoading) {
		@* if (isLoading) {
			$btn.html('<i class="fas fa-spinner fa-spin"></i> Saving...');
			$btn.prop('disabled', true);
		} else {
			$btn.html('Save Wish');
			$btn.prop('disabled', false);
		} *@
	}

	function uploadImage() {
		const input = document.getElementById('imageUpload');
		if (input && input.files.length > 0) {
			const file = input.files[0];
			const formData = new FormData();
			formData.append('file', file);
			fetch('/api/icon/upload', {
				method: 'POST',
				body: formData,
				credentials: 'include'
			})
				.then(response => {
					if (!response.ok) {
						throw new Error('Image upload failed');
					}
					return response.json();
				})
				.then(result => {
					document.getElementById('wishImageUploadDummy').style.display = 'none';
					document.getElementById('wishImageUploadText').style.display = 'none';

					document.getElementById('wishImagePreview').hidden = false;
					document.getElementById('wishImagePreview').src = result.url;
				})
				.catch(error => {
					console.error('Upload error:', error);
					showError('Image upload failed. Please try again.');
				});
		}
	}

	function saveWish() {
		const wishItem = {
			itemName: document.getElementById("wishName").value,
			productLink: document.getElementById("productLink").value,
			itemCategory: document.getElementById("categorySelect").value,
			priceAmount: document.getElementById("productPrice").value,
			vendorId: document.getElementById("vendorSelect").value
		};

		setLoadingState(true);
		fetch('/api/wishes/add', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			credentials: 'include',
			body: JSON.stringify(wishItem)
		})
			.then(response => {
				if (!response.ok) {
					throw new Error('Failed to save wish');
				}
				window.location.href = '/wishlist';
			})
			.catch(error => {
				console.error('Error saving wish:', error);
				showError('Failed to save wish. Please try again.');
			}).finally(() => {
				setLoadingState(false);
			});
	}

	$(document).ready(function () {
		$('#imagePreview').click(() => $('#imageUpload').click());
	});
</script>