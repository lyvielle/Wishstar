@rendermode InteractiveServer
@page "/wish"
@using Wishstar.Components.Pages.Context
@using Wishstar.Extensions
@using Wishstar.Models
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<PageTitle>💫 Create Wish - Wishstar</PageTitle>
<HeadContent>
	<link rel="stylesheet" href="styles/wish.styles.css">
</HeadContent>

<div class="container">
	<button class="back-btn" onclick="window.history.back()">
		<i class="fas fa-arrow-left"></i>
		Back
	</button>

	<div class="wish-form">
		<!-- Image Upload -->
		<div class="image-upload">
			<div class="upload-preview" id="imagePreview">
				<i class="fas fa-camera fa-2x" id="wishImageUploadDummy"></i>
				<img alt="Product image" hidden id="wishImagePreview">
				<div id="wishImageUploadText">Click to upload image</div>
			</div>
			<input type="file" id="imageUpload" accept="image/*" hidden onchange="uploadImage()">
		</div>

		<!-- Wish Details -->
		<div class="form-group">
			<label>Wish Name <span class="required">*</span></label>
			<input type="text" id="wishName" placeholder="Enter wish name" required @bind="WishItem.ItemName">
		</div>

		<div class="form-group">
			<label>Description</label>
			<textarea id="wishDescription" rows="3" placeholder="Add a description"
				@bind="WishItem.ItemDescription"></textarea>
		</div>

		<!-- Vendor Selection -->
		<div class="form-group">
			<label>Vendor <span class="required">*</span></label>
			<select id="vendorSelect" required @bind="SelectedVendor">
				@foreach (var vendor in Database.GetVendors())
				{
					<option value="@vendor.VendorName">@vendor.VendorName</option>
				}
				<option value="new" class="combo-add">
					<i class="fas fa-plus"></i>+ Add New Vendor
				</option>
			</select>
		</div>

		<!-- Product Link -->
		<div class="form-group">
			<label>Product Link <span class="required">*</span></label>
			<input type="url" id="productLink" placeholder="https://example.com/product" required
				@bind="WishItem.ProductLink">
		</div>

		<!-- Price & Currency -->
		<div class="form-group">
			<label>Price <span class="required">*</span></label>
			<div class="price-group">
				<input type="number" id="productPrice" placeholder="0.00" step="0.01" required @bind="PriceAmount">
				<select id="currencySelect" @onchange="OnCurrencySelected">
					@foreach (var currency in CurrencyDescriptor.GetAllCurrencies())
					{
						<option value="@currency.Code">@currency.Code</option>
					}
				</select>
			</div>
		</div>

		<!-- Category Selection -->
		<div class="form-group">
			<label>Category <span class="required">*</span></label>
			<select id="categorySelect" required @bind="SelectedCategory">
				@foreach (var category in Database.GetCategories())
				{
					<option value="@category.CategoryName">@category.CategoryName</option>
				}
				<option value="new" class="combo-add">
					<i class="fas fa-plus"></i>+ Add New Category
				</option>
			</select>
		</div>

		<div class="form-group">
			<label class="checkbox-container">
				<input type="checkbox" id="privateCheckbox" class="private-checkbox" @bind="WishItem.PrivateItem">
				<span class="checkmark"></span>
				Private Item (only visible when logged in)
			</label>
		</div>

		<div class="form-actions">
			<button class="save-btn" id="saveWish"
				@onclick="@(() => JSRuntime.InvokeVoidAsync("saveWish", WishItem, Enum.GetName(Action)))">
				Save Wish
			</button>

		</div>
	</div>
</div>

<script>
	function showError(message) {
		console.error(message);
		$('.error-message').remove();
		$('.wish-form').prepend(
			$(`<div class="error-message">${message}</div>`));
	}

	function setLoadingState(isLoading) {
		if (isLoading) {
			$('saveWish').html('<i class="fas fa-spinner fa-spin"></i> Saving...');
			$('saveWish').prop('disabled', true);
		} else {
			$('saveWish').html('Save Wish');
			$('saveWish').prop('disabled', false);
		}
	}

	function uploadImage() {
		const input = document.getElementById('imageUpload');
		if (input && input.files.length > 0) {
			const file = input.files[0];
			const formData = new FormData();
			formData.append('file', file);

			$.ajax({
				url: '/api/icon/upload',
				type: 'POST',
				data: formData,
				processData: false,
				contentType: false,
				success: function (data) {
					if (!window.registeredComponent) {
						showError('Internal error. Uploading images is currently not supported.');
						return;
					}
					window.registeredComponent.invokeMethodAsync("SetImage", data.url);
					setImage(data.url);
				},
				error: function (jqXHR, textStatus, errorThrown) {
					console.error('Upload error:', textStatus, errorThrown);
					showError('Image upload failed. Please try again.');
				}
			});
		}
	}

	function setImage(imageUrl) {
		document.getElementById('wishImageUploadDummy').style.display = 'none';
		document.getElementById('wishImageUploadText').style.display = 'none';

		document.getElementById('wishImagePreview').hidden = false;
		document.getElementById('wishImagePreview').src = imageUrl;
	}

	function saveWish(wishItem, action) {
		let apiUrl = '/api/wishes/';
		if (action === 'Update') {
			apiUrl += 'update';
		} else if (action == 'Add') {
			apiUrl += 'add';
		} else {
			showError('Invalid action. Please try again.');
			return;
		}

		setLoadingState(true);
		$.ajax({
			url: apiUrl,
			type: 'POST',
			contentType: 'application/json',
			data: JSON.stringify({ WishItem: wishItem }),
			success: function (data) {
				window.location.href = '/wishlist';
			},
			error: function (jqXHR, textStatus, errorThrown) {
				console.error('Save error:', textStatus, errorThrown);
				showError('Failed to save wish. Please try again.');
			},
			complete: function () {
				setLoadingState(false);
			}
		});
	}

	function registerHomeComponent(instance) {
		if (!window.registeredComponent) {
			window.registeredComponent = instance;
		}
	}

	$(document).ready(function () {
		$('#imagePreview').click(() => $('#imageUpload').click());
	});
</script>