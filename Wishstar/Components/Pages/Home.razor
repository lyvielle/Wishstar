@rendermode InteractiveServer
@page "/wishlist"
@using System.Collections.ObjectModel
@using System.ComponentModel
@using Wishstar.Components.Pages.Context
@using Wishstar.Extensions
@using Wishstar.Models
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<PageTitle>💫 Wishstar</PageTitle>
<HeadContent>
	<link rel="stylesheet" href="styles/wishlist.styles.css">
</HeadContent>

@try
{
	<div class="container">
		<header>
			<div class="logo">💫 Wishstar</div>
			<div>
				<select class="currency-selector" @onchange="OnCurrencyChange">
					@foreach (var currency in CurrencyDescriptor.GetAllCurrencies())
					{
						<option>@currency.Code</option>
					}
				</select>
				@if (!IsLoggedIn)
				{
					<button class="login-btn" @onclick="ReferToLogin">Login</button>
				}
			</div>
		</header>

		<hr class="separator">

		<div class="controls">
			<div class="search-container">
				<input type="text" class="search-bar" placeholder="Search items..." @onchange="OnSearchTextChange">
				<select class="currency-selector-alt" @onchange="OnCurrencyChange">
					@foreach (var currency in CurrencyDescriptor.GetAllCurrencies())
					{
						<option>@currency.Code</option>
					}
				</select>
			</div>

			<select class="user-filter" @onchange="OnUserFilterChange">
				<option>All Users</option>
				@foreach (var user in Database.GetUsers())
				{
					<option>@user.Username</option>
				}
			</select>
			<div class="select-container">
				<select @bind="SelectedVendor">
					<option>All Vendors</option>
					@foreach (var vendor in Database.GetVendors())
					{
						<option value="@vendor.VendorName">@vendor.VendorName</option>
					}
					@if (IsLoggedIn)
					{
						<option class="combo-add">+ Add Vendor</option>
					}
				</select>
				@if (SelectedVendor != "All Vendors" && SelectedVendor != Models.Vendor.GetUnspecified().VendorName)
				{
					<button class="edit-btn" @onclick="() => EditVendor()">
						<i class="fas fa-pen"></i>
					</button>
				}
				else
				{
					<button class="edit-btn" disabled>
						<i class="fas fa-pen"></i>
					</button>
				}
			</div>
			<div class="select-container">
				<select class="category-filter" @bind="SelectedCategory">
					<option>All Categories</option>
					@foreach (var category in Database.GetCategories())
					{
						<option>@category.CategoryName</option>
					}
					@if (IsLoggedIn)
					{
						<option class="combo-add">+ Add Category</option>
					}
				</select>
				@if (SelectedCategory != "All Categories" && SelectedCategory !=
							WishCategory.GetUncategorized().CategoryName)
				{
					<button class="edit-btn" @onclick="() => EditCategory()">
						<i class="fas fa-pen"></i>
					</button>
				}
				else
				{
					<button class="edit-btn" disabled>
						<i class="fas fa-pen"></i>
					</button>
				}
			</div>
		</div>

		<div class="wishlist-grid">
			@foreach (var wishItem in WishItems)
			{
				@if (!wishItem.PrivateItem || IsLoggedIn)
				{
					<a href="#" class="wish-item">
						@if (IsLoggedIn)
						{
							<div class="item-actions">
								<button class="action-btn" @onclick="(() => EditWishItem(wishItem))"><i
										class="fas fa-pencil"></i></button>
								<button class="action-btn" @onclick="(() => DeleteWishItem(wishItem))"><i
										class="fas fa-trash"></i></button>
							</div>
						}
						<a href="@wishItem.ProductLink" target="_blank" rel="noopener noreferrer"
							style="cursor: pointer; border: none;">
							<img src="@ImageResolver.GetRelativeImageUrl(wishItem.ImageName)" class="product-image"
								alt="@wishItem.ItemDescription" />
						</a>
						<div class="vendor">@(Database.GetVendorById(wishItem.VendorId)?.VendorName ??
											Models.Vendor.GetUnspecified().VendorName)</div>
						<h3>@wishItem.ItemName</h3>
						<p>@wishItem.ItemDescription</p>
						<div class="price">@wishItem.ItemPrice.ToString(DisplayCurrencyType)</div>
						<div class="user">@(Database.GetUserById(wishItem.UserId)?.Username ?? "Unknown")</div>
						@if (wishItem.PrivateItem)
						{
							<div class="private-indicator" title="Private item">
								<i class="fas fa-lock"></i>
							</div>
						}
					</a>
				}
			}
		</div>

		@if (IsLoggedIn)
		{
			<button class="add-item" @onclick="(() => AddWishItem())">+</button>
		}
	</div>

	<script>
		function registerHomeComponent(instance) {
			if (!window.registeredComponent) {
				window.registeredComponent = instance;
			}
		}
	</script>
}
catch (Exception ex)
{
	<p>Error: @ex.Message</p>
}