@rendermode InteractiveServer
@page "/vendor"
@using Wishstar.Components.Pages.Context
@using Wishstar.Extensions
@using Wishstar.Models
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime

<PageTitle>💫 Add Vendor - Wishstar</PageTitle>
<HeadContent>
	<link rel="stylesheet" href="styles/vendor.styles.css">
</HeadContent>

<div class="container">
	<button class="back-btn" @onclick="() => NavigateBack()">
		<i class="fas fa-arrow-left"></i>
		Back
	</button>

	<div class="vendor-form">
		<div class="form-group">
			<label for="vendorName">Vendor Name</label>
			<input type="text" id="vendorName" placeholder="Enter vendor name" required @bind="VendorItem.VendorName">
		</div>

		<div class="form-group">
			<label for="vendorUrl">Website URL</label>
			<input type="url" id="vendorUrl" placeholder="https://example.com" required @bind="VendorItem.Website">
		</div>

		<div class="form-actions">
			@if (Action == PageContextAction.Update)
			{
				<button class="save-btn" id="deleteVendor"
					@onclick="@(() => JSRuntime.InvokeVoidAsync("updateVendor", VendorItem, Enum.GetName(PageContextAction.Delete)))">
					Delete Vendor
				</button>
			}
			<button class="save-btn" id="saveVendor"
				@onclick="@(() => JSRuntime.InvokeVoidAsync("updateVendor", VendorItem, Enum.GetName(Action)))">
				@if (Action == PageContextAction.Update)
				{
					<text>Update Vendor</text>
				}
				else if (Action == PageContextAction.Add)
				{
					<text>Add Vendor</text>
				}
			</button>
		</div>
	</div>
</div>

<script>
	function disableButton($btn)) {
		if ($btn) {
			$btn.html('<i class="fas fa-spinner fa-spin"></i> Saving...');
			$btn.prop('disabled', true);
		}
	}

	function enableButton($btn, content) {
		if ($btn) {
			$btn.html(content);
			$btn.prop('disabled', false);
		}
	}

	function updateVendor(vendor, action) {
		if (!$('#vendorName').val()) {
			showError("Vendor name is required.");
			return;
		}

		if (!$('#vendorUrl').val()) {
			showError("Website URL is required.");
			return;
		}

		disableButton($('#saveVendor'));
		disableButton($('#deleteVendor'));

		let url = "/api/vendors/add";
		let errorMessage = "Failed to save vendor. Please try again."

		if (action === 'Update') {
			url = "/api/vendors/update";
			errorMessage = "Failed to update vendor. Please try again.";
		} else if (action == 'Delete') {
			url = "api/vendors/delete";
			errorMessage = "Failed to delete vendor. Please try again";
			vendor = { VendorId: vendor.VendorId };
		}

		$.ajax({
			type: 'POST',
			url: url,
			contentType: 'application/json',
			data: JSON.stringify(vendor),
			success: function () {
				if (window.componentInstance) {
					window.componentInstance.invokeMethodAsync('NavigateBack');
				} else {
					console.error("Component instance not registered.");
				}
			},
			error: function (jqXHR, textStatus, errorThrown) {
				console.error('Save error:', textStatus, errorThrown);
				showError('Failed to save vendor');
			},
			complete: function () {
				enableButton($('#saveVendor'), 'Save Vendor');
				enableButton($('#deleteVendor'), 'Delete Vendor');
			}
		});
	}

	window.registerComponentInstance = (instance) => {
		if (!window.componentInstance) {
			window.componentInstance = instance;
		}
	}

	function showError(message) {
		$('.error-message').remove();
		$('.vendor-form').prepend(
			$(`<div class="error-message">${message}</div>`)
		);
	}
</script>